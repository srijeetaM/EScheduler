!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CL_USE_DEPRECATED_OPENCL_1_2_APIS	functionalities.h	40;"	d
C_BIG	functionalities.h	/^int C_BIG;$/;"	v
DAGInfo	functionalities.h	/^}DAGInfo;$/;"	t	typeref:struct:_daginfo
DAGTime	functionalities.h	/^}DAGTime;$/;"	t	typeref:struct:_DAGtime
DeviceConfig	functionalities.h	/^} DeviceConfig;$/;"	t	typeref:struct:_devConfig
DeviceSpecification	functionalities.h	/^} DeviceSpecification;$/;"	t	typeref:struct:_deviceSpecification
FACTOR	functionalities.h	/^int FACTOR;$/;"	v
G_BIG	functionalities.h	/^int G_BIG;$/;"	v
G_LITTLE	functionalities.h	/^int G_LITTLE;$/;"	v
Interval	functionalities.h	/^}Interval;$/;"	t	typeref:struct:_interval
JobInfo	functionalities.h	/^}JobInfo;$/;"	t	typeref:struct:_jobinfo
KernelEvents	functionalities.h	/^} KernelEvents;$/;"	t	typeref:struct:_kernel_events
KernelExecutionInfo	functionalities.h	/^} KernelExecutionInfo;$/;"	t	typeref:struct:_kernelexecutioninfo
KernelInfo	functionalities.h	/^} KernelInfo;$/;"	t	typeref:struct:_kernelinfo
KernelLaunchInfo	functionalities.h	/^} KernelLaunchInfo;$/;"	t	typeref:struct:_kernellaunchinfo
KernelName	functionalities.h	/^    std::string KernelName;$/;"	m	struct:_kernelinfo
LOG_LEVEL	functionalities.h	/^int LOG_LEVEL;$/;"	v
LOG_PROFILE	functionalities.h	/^int LOG_PROFILE;$/;"	v
LOG_SCHEDULER	functionalities.h	/^int LOG_SCHEDULER;$/;"	v
MODE	functionalities.h	/^int MODE;$/;"	v
NumCoresPerDevice	functionalities.h	/^int NumCoresPerDevice;$/;"	v
NumNodes_0	functionalities.h	/^int NumNodes_0;$/;"	v
NumNodes_1	functionalities.h	/^int NumNodes_1;$/;"	v
NumOfJobs	functionalities.h	/^int NumOfJobs;$/;"	v
NumOfSensors	functionalities.h	/^int NumOfSensors;$/;"	v
NumOfTempBand	functionalities.h	/^int NumOfTempBand;$/;"	v
NumofCPUs	functionalities.h	/^int NumofCPUs;$/;"	v
PLATFORM_CPU	functionalities.h	/^int PLATFORM_CPU;$/;"	v
PLATFORM_GPU	functionalities.h	/^int PLATFORM_GPU;$/;"	v
POLE	functionalities.h	/^int POLE;$/;"	v
SAFE	functionalities.h	/^int SAFE;$/;"	v
START_TIME	functionalities.h	/^unsigned long long int START_TIME;$/;"	v
STR_LENGTH	functionalities.h	/^int STR_LENGTH; $/;"	v
SchedulerFinish	functionalities.h	/^int SchedulerFinish=0;$/;"	v
TaskInfo	functionalities.h	/^} TaskInfo;$/;"	t	typeref:struct:_taskinfo
TempInterval	functionalities.h	/^int TempInterval;$/;"	v
Temperature	functionalities.h	/^} Temperature;$/;"	t	typeref:struct:_temperature
_DAGtime	functionalities.h	/^typedef struct _DAGtime$/;"	s
__FUNCTIONALITIES_H	functionalities.h	3;"	d
__STRING_H	string.h	2;"	d
_daginfo	functionalities.h	/^typedef struct _daginfo$/;"	s
_devConfig	functionalities.h	/^typedef struct _devConfig{$/;"	s
_deviceSpecification	functionalities.h	/^typedef struct _deviceSpecification{$/;"	s
_interval	functionalities.h	/^typedef struct _interval{$/;"	s
_jobinfo	functionalities.h	/^typedef struct _jobinfo$/;"	s
_kernel_events	functionalities.h	/^typedef struct _kernel_events$/;"	s
_kernelexecutioninfo	functionalities.h	/^typedef struct _kernelexecutioninfo{  $/;"	s
_kernelinfo	functionalities.h	/^typedef struct _kernelinfo$/;"	s
_kernellaunchinfo	functionalities.h	/^typedef struct _kernellaunchinfo{$/;"	s
_taskinfo	functionalities.h	/^typedef struct _taskinfo$/;"	s
_temperature	functionalities.h	/^typedef struct _temperature{$/;"	s
arrival	functionalities.h	/^    unsigned long long int arrival;$/;"	m	struct:_taskinfo
arrivalTime	functionalities.h	/^    unsigned long long int arrivalTime;$/;"	m	struct:_DAGtime
arrivaltime	automation.py	/^arrivaltime = '0.0'$/;"	v
barrier_read	functionalities.h	/^    cl_event barrier_read;$/;"	m	struct:_kernel_events
barrier_write	functionalities.h	/^    cl_event barrier_write;$/;"	m	struct:_kernel_events
basespeed	functionalities.h	/^    std::vector <float> basespeed;$/;"	m	struct:_taskinfo
bufferInputID	functionalities.h	/^    std::vector <unsigned int> bufferInputID;$/;"	m	struct:_kernelinfo
bufferOutputID	functionalities.h	/^    std::vector <unsigned int> bufferOutputID;  $/;"	m	struct:_kernelinfo
chunkSizeTiming	functionalities.h	/^    unsigned long long int chunkSizeTiming;$/;"	m	struct:_kernelinfo
control_mode	functionalities.h	/^    int control_mode;$/;"	m	struct:_kernellaunchinfo
controlerTemp	functionalities.h	/^int controlerTemp;$/;"	v
cpuB_0	functionalities.h	/^    int cpuB_0;$/;"	m	struct:_temperature
cpuB_1	functionalities.h	/^    int cpuB_1;$/;"	m	struct:_temperature
cpuB_2	functionalities.h	/^    int cpuB_2;$/;"	m	struct:_temperature
cpuB_3	functionalities.h	/^    int cpuB_3;$/;"	m	struct:_temperature
dagInfo	functionalities.h	/^    DAGInfo * dagInfo;$/;"	m	struct:_taskinfo
daghistory_file_contents	automation.py	/^daghistory_file_contents = open("dag_history\/dag_history_0.stats",'w')$/;"	v
data	functionalities.h	/^    std::vector<void*>  data;$/;"	m	struct:_taskinfo
data_outflow	functionalities.h	/^    std::vector < std::tuple <unsigned int, unsigned int, unsigned int> >data_outflow;$/;"	m	struct:_kernelinfo
deadline	automation.py	/^deadline = '999.0'$/;"	v
deadline	functionalities.h	/^    float deadline;$/;"	m	struct:_DAGtime
deadline	functionalities.h	/^    unsigned long long int deadline;    $/;"	m	struct:_taskinfo
deadlineViolated	functionalities.h	/^    int deadlineViolated;$/;"	m	struct:_DAGtime
dependency	functionalities.h	/^    std::vector <int> dependency;$/;"	m	struct:_taskinfo
dependency	functionalities.h	/^    std::vector <std::vector <int>> dependency;$/;"	m	struct:_jobinfo
devEndTime	functionalities.h	/^    unsigned long long int  devEndTime;$/;"	m	struct:_kernelexecutioninfo
devStartTime	functionalities.h	/^    unsigned long long int  devStartTime;$/;"	m	struct:_kernelexecutioninfo
devTotalTime	functionalities.h	/^    unsigned long long int  devTotalTime; $/;"	m	struct:_kernelexecutioninfo
device_config	functionalities.h	/^    std::vector<DeviceConfig*> device_config;    $/;"	m	struct:_deviceSpecification
device_id	automation.py	/^device_id = sys.argv[5]$/;"	v
device_index	functionalities.h	/^    int device_index;$/;"	m	struct:_kernellaunchinfo
device_pos	functionalities.h	/^    int device_pos;$/;"	m	struct:_kernellaunchinfo
devlock	functionalities.h	/^int devlock=0;$/;"	v
dispatchTime	functionalities.h	/^    unsigned long long int  dispatchTime; \/\/ time difference between dispatch start and dispatch end$/;"	m	struct:_kernelexecutioninfo
end	functionalities.h	/^    unsigned long long int end;$/;"	m	struct:_interval
exTime	functionalities.h	/^    float exTime;$/;"	m	struct:_taskinfo
exec	functionalities.h	/^    cl_event exec;$/;"	m	struct:_kernel_events
expected_speed	functionalities.h	/^    float expected_speed;$/;"	m	struct:_kernellaunchinfo
files	automation.py	/^files = os.listdir(path)$/;"	v
files_p	automation.py	/^    files_p = os.listdir(path)$/;"	v
finishTime	functionalities.h	/^    unsigned long long int finishTime;$/;"	m	struct:_DAGtime
frequency	automation.py	/^frequency = '-1'$/;"	v
frequency	functionalities.h	/^    unsigned int frequency;$/;"	m	struct:_devConfig
frequency	functionalities.h	/^    unsigned int frequency;$/;"	m	struct:_kernellaunchinfo
frequency_change_time	functionalities.h	/^    unsigned long long int frequency_change_time;$/;"	m	struct:_kernelexecutioninfo
fused_node_id	automation.py	/^fused_node_id = sys.argv[3]$/;"	v
gbool	functionalities.h	/^std::vector<bool> gbool;$/;"	v
gchar	functionalities.h	/^std::vector<char> gchar;$/;"	v
gdouble	functionalities.h	/^std::vector<double> gdouble;$/;"	v
generatePlot	functionalities.h	/^int generatePlot;$/;"	v
gfloat	functionalities.h	/^std::vector<float> gfloat;$/;"	v
gint	functionalities.h	/^std::vector<int> gint;$/;"	v
globalDAGID	functionalities.h	/^    int globalDAGID;$/;"	m	struct:_daginfo
globalWorkSize	functionalities.h	/^    size_t globalWorkSize[3];$/;"	m	struct:_kernelinfo
global_dagid	automation.py	/^global_dagid = '0'$/;"	v
glong	functionalities.h	/^std::vector<long> glong;$/;"	v
gpu_4	functionalities.h	/^    int gpu_4;$/;"	m	struct:_temperature
gshort	functionalities.h	/^std::vector<short> gshort;$/;"	v
guint	functionalities.h	/^std::vector<uint> guint;$/;"	v
gulong	functionalities.h	/^std::vector<ulong> gulong;$/;"	v
gushort	functionalities.h	/^std::vector<ushort> gushort;$/;"	v
highFrequencyBound	functionalities.h	/^    unsigned int highFrequencyBound;$/;"	m	struct:_deviceSpecification
hyper_period	functionalities.h	/^unsigned long long int hyper_period;$/;"	v
inputBuffers	functionalities.h	/^    std::vector < std::tuple <std::string, unsigned int, unsigned int> > inputBuffers;$/;"	m	struct:_kernelinfo
instanceID	functionalities.h	/^    int instanceID;$/;"	m	struct:_daginfo
instanceid	automation.py	/^instanceid = '0'$/;"	v
intervalWidth	functionalities.h	/^    unsigned long long int intervalWidth;$/;"	m	struct:_interval
io	functionalities.h	/^    std::vector<cl_mem> io;$/;"	m	struct:_kernellaunchinfo
ioBuffers	functionalities.h	/^    std::vector < std::tuple <std::string, unsigned int, unsigned int> > ioBuffers;$/;"	m	struct:_kernelinfo
isDependent	automation.py	/^isDependent = '-1'$/;"	v
isProfileMode	functionalities.h	/^int isProfileMode;$/;"	v
isTerminal	automation.py	/^isTerminal = '1'$/;"	v
isTerminal	functionalities.h	/^    int isTerminal;$/;"	m	struct:_taskinfo
is_profiled	functionalities.h	/^    int is_profiled;$/;"	m	struct:_kernel_events
jobID	functionalities.h	/^    int jobID;$/;"	m	struct:_daginfo
jobID	functionalities.h	/^    int jobID;$/;"	m	struct:_jobinfo
job_id	automation.py	/^job_id = sys.argv[1];$/;"	v
ke	functionalities.h	/^    KernelEvents ke;$/;"	m	struct:_kernellaunchinfo
kernelObject	functionalities.h	/^    cl_kernel kernelObject;$/;"	m	struct:_kernelinfo
kernelObjects	functionalities.h	/^    std::vector<cl_kernel> kernelObjects;$/;"	m	struct:_kernelinfo
kernelSource	functionalities.h	/^    std::string kernelSource;$/;"	m	struct:_kernelinfo
kernel_index	functionalities.h	/^    int kernel_index;$/;"	m	struct:_kernellaunchinfo
kernels	functionalities.h	/^    std::vector <KernelInfo *>kernels;$/;"	m	struct:_taskinfo
kex	functionalities.h	/^    KernelExecutionInfo kex;$/;"	m	struct:_kernellaunchinfo
klinfo	functionalities.h	/^    KernelLaunchInfo* klinfo;$/;"	m	struct:_DAGtime
l_deadline	automation.py	/^l_deadline = '999.0'$/;"	v
last_speedup	functionalities.h	/^    float last_speedup;$/;"	m	struct:_kernellaunchinfo
lateness	functionalities.h	/^    float lateness;$/;"	m	struct:_DAGtime
lines	automation.py	/^lines = open('configure_input.txt').read().splitlines()$/;"	v
localArguments	functionalities.h	/^    std::vector < std::tuple <std::string, unsigned int, unsigned int> > localArguments;$/;"	m	struct:_kernelinfo
localSizeFactor	functionalities.h	/^    std::vector <float> localSizeFactor;$/;"	m	struct:_kernelinfo
localWorkSize	functionalities.h	/^    size_t localWorkSize[3];$/;"	m	struct:_kernelinfo
lowFrequencyBound	functionalities.h	/^    unsigned int lowFrequencyBound; \/\/= frequencies[0];$/;"	m	struct:_deviceSpecification
main	scheduler.cpp	/^int main(int argc, char const *argv[])$/;"	f
makespan	functionalities.h	/^    float makespan;$/;"	m	struct:_DAGtime
mico_kernel	automation.py	/^    mico_kernel = '0'$/;"	v
mico_kernel	automation.py	/^mico_kernel = '1'$/;"	v
micro_kernel_device	functionalities.h	/^int micro_kernel_device;$/;"	v
midFrequency	functionalities.h	/^    unsigned int midFrequency; \/\/= frequencies[frequencies.size() - 1]; $/;"	m	struct:_deviceSpecification
monitorTemp	functionalities.h	/^int monitorTemp;$/;"	v
mtx_devlock	functionalities.h	/^std::mutex mtx_devlock;$/;"	v
mtx_nlock	functionalities.h	/^std::mutex mtx_nlock;$/;"	v
mtx_rblock	functionalities.h	/^std::mutex mtx_rblock;$/;"	v
nKernels	functionalities.h	/^int nKernels=0;$/;"	v
nTasks	functionalities.h	/^int nTasks=0;$/;"	v
ndEnd	functionalities.h	/^    unsigned long long int  ndEnd;$/;"	m	struct:_kernelexecutioninfo
ndQueued	functionalities.h	/^    unsigned long long int  ndQueued;$/;"	m	struct:_kernelexecutioninfo
ndStart	functionalities.h	/^    unsigned long long int  ndStart;$/;"	m	struct:_kernelexecutioninfo
ndStart	functionalities.h	/^    unsigned long long int ndStart;$/;"	m	struct:_DAGtime
ndSubmit	functionalities.h	/^    unsigned long long int  ndSubmit;$/;"	m	struct:_kernelexecutioninfo
ndTime	functionalities.h	/^    unsigned long long int  ndTime;$/;"	m	struct:_kernelexecutioninfo
nd_end	functionalities.h	/^    unsigned long long int  nd_end;$/;"	m	struct:_kernelexecutioninfo
nd_start	functionalities.h	/^    unsigned long long int  nd_start;$/;"	m	struct:_kernelexecutioninfo
nd_start_h	functionalities.h	/^    unsigned long long int  nd_start_h;$/;"	m	struct:_kernelexecutioninfo
nd_time	functionalities.h	/^    unsigned long long int  nd_time;$/;"	m	struct:_kernelexecutioninfo
nlock	functionalities.h	/^int nlock=0;$/;"	v
noIOBuffers	functionalities.h	/^    unsigned int noIOBuffers;$/;"	m	struct:_kernelinfo
noInputBuffers	functionalities.h	/^    unsigned int noInputBuffers;$/;"	m	struct:_kernelinfo
noOutputBuffers	functionalities.h	/^    unsigned int noOutputBuffers;$/;"	m	struct:_kernelinfo
no_micro_kernel	functionalities.h	/^int no_micro_kernel=0;$/;"	v
nodes	functionalities.h	/^    std::vector < int> nodes;$/;"	m	struct:_taskinfo
nonPartition	functionalities.h	/^    std::vector < unsigned long long int> nonPartition;  $/;"	m	struct:_kernelinfo
not_done_count	functionalities.h	/^    unsigned int not_done_count;$/;"	m	struct:_kernellaunchinfo
notify_callback_rel_end_time	functionalities.h	/^    unsigned long long int  notify_callback_rel_end_time;$/;"	m	struct:_kernelexecutioninfo
notify_callback_rel_start_time	functionalities.h	/^    unsigned long long int  notify_callback_rel_start_time;$/;"	m	struct:_kernelexecutioninfo
notify_cb_buffer_c	functionalities.h	/^unsigned long long int notify_cb_buffer_c=0;$/;"	v
notify_cb_buffer_g	functionalities.h	/^unsigned long long int notify_cb_buffer_g=0; $/;"	v
numOfDAGs	functionalities.h	/^int numOfDAGs;$/;"	v
numOfEdges	functionalities.h	/^    int numOfEdges;$/;"	m	struct:_jobinfo
numOfHyperperiod	functionalities.h	/^int numOfHyperperiod;$/;"	v
numOfNodes	functionalities.h	/^    int numOfNodes;$/;"	m	struct:_jobinfo
offset	functionalities.h	/^    unsigned int offset;$/;"	m	struct:_kernellaunchinfo
options	functionalities.h	/^    std::string options;$/;"	m	struct:_kernelinfo
outputBuffers	functionalities.h	/^    std::vector < std::tuple <std::string, unsigned int, unsigned int> > outputBuffers;$/;"	m	struct:_kernelinfo
outputbuffer	functionalities.h	/^std::string outputbuffer;$/;"	v
path	automation.py	/^    path = "tinfo\/DAG_"+ job$/;"	v
path	automation.py	/^path = "tinfo_full\/DAG_"+ job_id$/;"	v
path1	automation.py	/^path1 = "tinfo\/DAG_"+ job_id$/;"	v
platform_id	automation.py	/^platform_id = sys.argv[4]$/;"	v
platform_pos	functionalities.h	/^    int platform_pos;$/;"	m	struct:_kernellaunchinfo
powerup	functionalities.h	/^    float powerup;$/;"	m	struct:_devConfig
priority	functionalities.h	/^    int priority;$/;"	m	struct:_kernellaunchinfo
queued	functionalities.h	/^    int queued;  $/;"	m	struct:_kernellaunchinfo
raceToIdle	functionalities.h	/^int raceToIdle;$/;"	v
rblock	functionalities.h	/^int rblock=0;$/;"	v
read	functionalities.h	/^    std::vector<cl_event> read;$/;"	m	struct:_kernel_events
readEnd	functionalities.h	/^    unsigned long long int  readEnd;$/;"	m	struct:_kernelexecutioninfo
readQueued	functionalities.h	/^    unsigned long long int  readQueued; $/;"	m	struct:_kernelexecutioninfo
readStart	functionalities.h	/^    unsigned long long int  readStart;$/;"	m	struct:_kernelexecutioninfo
readStart	functionalities.h	/^    unsigned long long int readStart;$/;"	m	struct:_DAGtime
readSubmit	functionalities.h	/^    unsigned long long int  readSubmit;   $/;"	m	struct:_kernelexecutioninfo
readTime	functionalities.h	/^    unsigned long long int  readTime; $/;"	m	struct:_kernelexecutioninfo
read_end	functionalities.h	/^    unsigned long long int  read_end;$/;"	m	struct:_kernelexecutioninfo
read_start	functionalities.h	/^    unsigned long long int  read_start;$/;"	m	struct:_kernelexecutioninfo
read_start_h	functionalities.h	/^    unsigned long long int  read_start_h;$/;"	m	struct:_kernelexecutioninfo
read_time	functionalities.h	/^    unsigned long long int  read_time;$/;"	m	struct:_kernelexecutioninfo
rel_end_time	functionalities.h	/^    unsigned long long int  rel_end_time; \/\/notify_callback start Rtime, read end Rtime $/;"	m	struct:_kernelexecutioninfo
rel_start_time	functionalities.h	/^    unsigned long long int  rel_start_time; \/\/dispatch start Rtime $/;"	m	struct:_kernelexecutioninfo
reset	functionalities.h	/^    int reset;  $/;"	m	struct:_kernellaunchinfo
safe_duration	functionalities.h	/^unsigned long long int safe_duration=0;$/;"	v
safe_mode	functionalities.h	/^    int safe_mode;$/;"	m	struct:_DAGtime
sensors	functionalities.h	/^    std::vector<int> sensors;$/;"	m	struct:_temperature
size	functionalities.h	/^    unsigned int size;$/;"	m	struct:_kernellaunchinfo
speedup	functionalities.h	/^    float speedup;$/;"	m	struct:_devConfig
start	functionalities.h	/^    unsigned long long int start;$/;"	m	struct:_interval
start	functionalities.h	/^    unsigned long long int start;$/;"	m	struct:_kernellaunchinfo
startTime	functionalities.h	/^    unsigned long long int startTime;$/;"	m	struct:_DAGtime
start_node	automation.py	/^start_node = sys.argv[2]$/;"	v
stop_scheduler	functionalities.h	/^int stop_scheduler=0;$/;"	v
successors	functionalities.h	/^    std::vector <std::vector <int>> successors;$/;"	m	struct:_jobinfo
task	functionalities.h	/^    TaskInfo *task;$/;"	m	struct:_kernellaunchinfo
taskID	functionalities.h	/^    std::string taskID;$/;"	m	struct:_taskinfo
task_size	functionalities.h	/^    unsigned int task_size;$/;"	m	struct:_taskinfo
time_buffer	functionalities.h	/^int time_buffer;$/;"	v
tinfo_filename	automation.py	/^tinfo_filename= "node_" + start_node+ ":" + fused_node_id$/;"	v
trace	automation.py	/^trace=(job_id+","+start_node+","+fused_node_id+","+isDependent+","+ platform_id+","+device_id+","+l_deadline+","+arrivaltime+"," +deadline+","+isTerminal+","+global_dagid+","+instanceid+","+frequency)$/;"	v
traceID	functionalities.h	/^    int traceID;        $/;"	m	struct:_taskinfo
trace_file_contents	automation.py	/^trace_file_contents = open("trace\/dispatch_history_0.stats",'w')$/;"	v
turnaroundTime	functionalities.h	/^    float turnaroundTime;$/;"	m	struct:_DAGtime
turnaroundTime	functionalities.h	/^    unsigned long long int  turnaroundTime; \/\/ diff bw rel_end_time and rel_start_time$/;"	m	struct:_kernelexecutioninfo
varArguments	functionalities.h	/^    std::vector < std::tuple <std::string, unsigned int, unsigned int> > varArguments;$/;"	m	struct:_kernelinfo
workDimension	functionalities.h	/^    int workDimension;$/;"	m	struct:_kernelinfo
write	functionalities.h	/^    std::vector<cl_event> write;$/;"	m	struct:_kernel_events
writeEnd	functionalities.h	/^    unsigned long long int  writeEnd;$/;"	m	struct:_kernelexecutioninfo
writeQueued	functionalities.h	/^    unsigned long long int  writeQueued;$/;"	m	struct:_kernelexecutioninfo
writeStart	functionalities.h	/^    unsigned long long int  writeStart;$/;"	m	struct:_kernelexecutioninfo
writeStart	functionalities.h	/^    unsigned long long int writeStart;$/;"	m	struct:_DAGtime
writeSubmit	functionalities.h	/^    unsigned long long int  writeSubmit;$/;"	m	struct:_kernelexecutioninfo
writeTime	functionalities.h	/^    unsigned long long int  writeTime;$/;"	m	struct:_kernelexecutioninfo
write_buffers_start	functionalities.h	/^    unsigned long long int write_buffers_start;$/;"	m	struct:_kernelexecutioninfo
write_end	functionalities.h	/^    unsigned long long int  write_end;$/;"	m	struct:_kernelexecutioninfo
write_start	functionalities.h	/^    unsigned long long int  write_start;$/;"	m	struct:_kernelexecutioninfo
write_start_h	functionalities.h	/^    unsigned long long int  write_start_h;$/;"	m	struct:_kernelexecutioninfo
write_time	functionalities.h	/^    unsigned long long int  write_time;$/;"	m	struct:_kernelexecutioninfo
